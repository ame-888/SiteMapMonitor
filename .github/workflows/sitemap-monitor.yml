# Comprehensive AI Website Monitor
name: AI Website Monitor (Sitemap, Content, Assets, GitHub, Feeds)

# --- When to run this task ---
on:
  schedule:
    # Runs automatically. This example runs every hour at the start of the hour.
    - cron: '0 * * * *'
  # Allows you to run it manually from the GitHub Actions tab
  workflow_dispatch:

permissions:
  contents: write # Allow the workflow to push commits back to the repository

# --- What jobs to run ---
jobs:
  monitor:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Allows other domains to continue if one fails
matrix:
        config:
          # --- OpenAI ---
          - domain: "OpenAI"
            state_file: "state_openai.json"
            sitemap_url: "https://openai.com/sitemap.xml"
            key_pages_selectors:
              - "https://openai.com/blog|main"
              - "https://openai.com/pricing|main"
              - "https://platform.openai.com/docs/models|main"
            asset_monitor_pages:
              - "https://platform.openai.com/"
            github_repos:
              - "openai/openai-python"
              - "openai/openai-cookbook"
            research_feeds:
              - "https://openai.com/research/rss.xml"

          # --- Google AI / DeepMind ---
          - domain: "GoogleAI_DeepMind"
            state_file: "state_googleai_deepmind.json"
            sitemap_url: "https://deepmind.google/sitemap.xml"
            key_pages_selectors:
              - "https://deepmind.google/discover/blog|main"
              - "https://ai.google/discover/|main" # FIXED URL
              - "https://ai.google/docs|main" # FIXED URL
            asset_monitor_pages:
              - "https://ai.google/" # FIXED URL
            github_repos:
              - "google-deepmind/graphcast"
              - "google-gemini/generative-ai-python"
            research_feeds: [] # FIXED - Removed broken URLs

          # --- Anthropic ---
          - domain: "Anthropic"
            state_file: "state_anthropic.json"
            sitemap_url: "https://www.anthropic.com/sitemap.xml" # Use main site sitemap
            key_pages_selectors:
              - "https://docs.anthropic.com/claude/reference/getting-started-with-the-api|main"
              - "https://www.anthropic.com/news|div[role='list']"
            asset_monitor_pages:
              - "https://console.anthropic.com/"
            github_repos:
              - "anthropics/anthropic-sdk-python"
            research_feeds: []

          # --- Meta (Llama) ---
          - domain: "MetaAI_Llama"
            state_file: "state_metaai_llama.json"
            sitemap_url: "https://ai.meta.com/sitemap.xml" # Main Meta AI sitemap
            key_pages_selectors:
              - "https://ai.meta.com/blog/|main"
              - "https://ai.meta.com/research/publications/|main"
              - "https://llama.meta.com/docs/get-started/|main"
            asset_monitor_pages:
              - "https://llama.meta.com/"
            github_repos:
              - "meta-llama/llama"
              - "facebookresearch/llama-recipes"
            research_feeds:
              - "https://ai.meta.com/blog/rss/"

          # --- Mistral AI ---
          - domain: "MistralAI"
            state_file: "state_mistralai.json"
            sitemap_url: "https://mistral.ai/sitemap.xml" # Main site sitemap
            key_pages_selectors:
              - "https://mistral.ai/news/|main"
              - "https://docs.mistral.ai/getting-started/quickstart/|main"
            asset_monitor_pages:
              - "https://console.mistral.ai/"
            github_repos:
              - "mistralai/mistral-src"
              - "mistralai/client-python"
            research_feeds: []

          # --- Grok (xAI) ---
          - domain: "Grok_xAI"
            state_file: "state_grok_xai.json"
            sitemap_url: "https://docs.x.ai/sitemap.xml" # Docs sitemap (most reliable)
            key_pages_selectors:
              - "https://x.ai/blog|main"
              - "https://docs.x.ai/|main"
            asset_monitor_pages:
              - "https://grok.x.ai/"
            github_repos:
              - "xai-org/grok-1"
            research_feeds: []

          # --- Add more domains similarly ---
          # - domain: "AnotherAI"
          #   state_file: "state_anotherai.json"
          #   sitemap_url: "..."
          #   key_pages_selectors: []
          #   asset_monitor_pages: []
          #   github_repos: []
          #   research_feeds: []

    env:
      # Contents of env: are indented FURTHER (e.g., 2 spaces)
      JOB_DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL || '' }}
      JOB_GITHUB_TOKEN: ${{ secrets.GH_TOKEN || '' }} # Add a GH_TOKEN secret for GitHub API rate limits

    # steps: block STARTS at the SAME indentation level as strategy: and env:
    steps:
      # Contents of steps: start with '-' and are indented FURTHER
      # Step 1: Get a copy of our repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up the Python language environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Specify a version
          cache: 'pip' # Cache dependencies

      # Step 3: Install the tools our Python script needs
      - name: Install dependencies
        run: pip install requests beautifulsoup4 lxml PyGithub feedparser

      # Step 4: Run the comprehensive monitoring script
      - name: Run Monitor for ${{ matrix.config.domain }}
        id: monitor_script
        env:
          # Pass the entire matrix config for this job instance as JSON
          MATRIX_CONFIG_JSON: ${{ toJSON(matrix.config) }}
          # Pass the specific state file name
          STATE_FILE: ${{ matrix.config.state_file }}
          # Pass secrets needed by the script
          GITHUB_TOKEN: ${{ env.JOB_GITHUB_TOKEN }}
          # DISCORD_WEBHOOK_URL: ${{ env.JOB_DISCORD_WEBHOOK_URL }} # Script doesn't send directly now
        run: python monitor_script.py

      # Step 5: Send Consolidated Discord Notification (Handles Splitting)
      - name: Send Discord Notification for ${{ matrix.config.domain }}
        # Run if *any* change was detected AND webhook URL is set
        if: >
          (
            steps.monitor_script.outputs.new_urls_count > 0 ||
            steps.monitor_script.outputs.changed_pages_count > 0 ||
            steps.monitor_script.outputs.changed_assets_count > 0 ||
            steps.monitor_script.outputs.updated_repos_count > 0 ||
            steps.monitor_script.outputs.new_feed_entries_count > 0
          ) && env.JOB_DISCORD_WEBHOOK_URL != ''
        env: # Pass outputs to this step's environment for reliable access
          NEW_URLS_COUNT: ${{ steps.monitor_script.outputs.new_urls_count }}
          NEW_URLS_LIST: ${{ steps.monitor_script.outputs.new_urls_list }}
          CHANGED_PAGES_COUNT: ${{ steps.monitor_script.outputs.changed_pages_count }}
          CHANGED_PAGES_LIST: ${{ steps.monitor_script.outputs.changed_pages_list }}
          CHANGED_ASSETS_COUNT: ${{ steps.monitor_script.outputs.changed_assets_count }}
          CHANGED_ASSETS_LIST: ${{ steps.monitor_script.outputs.changed_assets_list }}
          UPDATED_REPOS_COUNT: ${{ steps.monitor_script.outputs.updated_repos_count }}
          UPDATED_REPOS_LIST: ${{ steps.monitor_script.outputs.updated_repos_list }}
          NEW_FEED_ENTRIES_COUNT: ${{ steps.monitor_script.outputs.new_feed_entries_count }}
          NEW_FEED_ENTRIES_LIST: ${{ steps.monitor_script.outputs.new_feed_entries_list }}
          SITEMAP_URL_CONFIG: ${{ matrix.config.sitemap_url || 'N/A' }}
          DOMAIN_NAME: ${{ matrix.config.domain }}
          WEBHOOK_URL: ${{ env.JOB_DISCORD_WEBHOOK_URL }}
        run: |
          # Function to escape JSON and send message chunk via curl
          send_discord_chunk() {
            local message_content="$1"
            # Escape backslashes, quotes, and newlines for JSON payload
            # Important: Use printf for robust escaping, especially with backslashes
            local escaped_message=$(printf '%s' "$message_content" | sed -e 's/\\/\\\\/g' -e 's/"/\\"/g' -e ':a;N;$!ba;s/\n/\\n/g')
            echo "Sending chunk (length ${#message_content})..."
            # Use printf for the data part to avoid shell interpretation issues
            curl -s -S -H "Content-Type: application/json" \
                 -d "$(printf '{"content":"%s"}' "$escaped_message")" \
                 "$WEBHOOK_URL" || echo "Curl command failed for chunk"
            # Add a small delay between messages if sending multiple
            sleep 1
          }

          # --- Build Message Parts ---
          MAX_CHUNK_LENGTH=1950 # Keep safely below Discord's 2000 char limit
          current_chunk=""
          message_parts=() # Array to hold sections

          # 1. Header (Always the start of the first message)
          header="**Changes detected on $DOMAIN_NAME**\n"
          current_chunk+="$header"

          # --- Add sections to the array if they exist ---
          if [[ "$NEW_URLS_COUNT" -gt 0 ]]; then
            message_parts+=( "**New Pages ($NEW_URLS_COUNT):** (Sitemap: $SITEMAP_URL_CONFIG)\n\`\`\`\n$NEW_URLS_LIST\n\`\`\`\n" )
          fi
          if [[ "$CHANGED_PAGES_COUNT" -gt 0 ]]; then
            message_parts+=( "**Changed Pages ($CHANGED_PAGES_COUNT):**\n\`\`\`\n$CHANGED_PAGES_LIST\n\`\`\`\n" )
          fi
          if [[ "$CHANGED_ASSETS_COUNT" -gt 0 ]]; then
            message_parts+=( "**Pages with Changed Assets ($CHANGED_ASSETS_COUNT):**\n\`\`\`\n$CHANGED_ASSETS_LIST\n\`\`\`\n" )
          fi
          if [[ "$UPDATED_REPOS_COUNT" -gt 0 ]]; then
            message_parts+=( "**Updated Repos ($UPDATED_REPOS_COUNT):**\n\`\`\`\n$UPDATED_REPOS_LIST\n\`\`\`\n" )
          fi
          if [[ "$NEW_FEED_ENTRIES_COUNT" -gt 0 ]]; then
             message_parts+=( "**New Research/Feed Entries ($NEW_FEED_ENTRIES_COUNT):**\n\`\`\`\n$NEW_FEED_ENTRIES_LIST\n\`\`\`\n" )
          fi

          # --- Iterate through parts and send chunks ---
          initial_chunk=true
          for part in "${message_parts[@]}"; do
            # Check if adding the *next* part exceeds the limit
            if [[ $(( ${#current_chunk} + ${#part} )) -gt $MAX_CHUNK_LENGTH ]] && [[ "$initial_chunk" = false ]]; then
              # If it exceeds, send the current chunk *first*
              send_discord_chunk "$current_chunk"
              # Start the new chunk *without* the main header, but maybe a continuation marker
              current_chunk="(cont.) **$DOMAIN_NAME changes:**\n" # Use a shorter header for subsequent chunks
            fi

            # Now, add the part to the current chunk
            # Check if the part *itself* is too long (edge case)
            if [[ ${#part} -gt $MAX_CHUNK_LENGTH ]]; then
                # Part is too long even on its own. Send a truncated version.
                local truncated_part="${part:0:$((MAX_CHUNK_LENGTH-50))}...\n\`\`\`\n(Section truncated)"
                # If current_chunk has content (the header), send it first
                if [[ ${#current_chunk} -gt 0 ]] && [[ "$current_chunk" != "$header" ]] && [[ "$current_chunk" != "(cont.) **$DOMAIN_NAME changes:**\n" ]]; then
                   send_discord_chunk "$current_chunk"
                fi
                # Send the truncated part as its own message
                send_discord_chunk "$truncated_part"
                # Reset current chunk to continuation header
                current_chunk="(cont.) **$DOMAIN_NAME changes:**\n"
            else
                # Part fits (maybe with existing content), append it
                current_chunk+="$part"
                initial_chunk=false # We've added at least one part
            fi
          done

          # --- Send any remaining message part ---
          # Check if current_chunk contains more than just an initial header
          if [[ "$current_chunk" != "$header" ]] && [[ "$current_chunk" != "(cont.) **$DOMAIN_NAME changes:**\n" ]]; then
            send_discord_chunk "$current_chunk"
          fi

          echo "Notifications sent."


# Step 6: Commit updated state file
      - name: Commit updated state for ${{ matrix.config.domain }}
        # Run if *any* change was detected
        if: >
          steps.monitor_script.outputs.new_urls_count > 0 ||
          steps.monitor_script.outputs.changed_pages_count > 0 ||
          steps.monitor_script.outputs.changed_assets_count > 0 ||
          steps.monitor_script.outputs.updated_repos_count > 0 ||
          steps.monitor_script.outputs.new_feed_entries_count > 0
        env: # Define ENV vars specifically for this step using the outputs
          NEW_URLS_COUNT: ${{ steps.monitor_script.outputs.new_urls_count }}
          CHANGED_PAGES_COUNT: ${{ steps.monitor_script.outputs.changed_pages_count }}
          CHANGED_ASSETS_COUNT: ${{ steps.monitor_script.outputs.changed_assets_count }}
          UPDATED_REPOS_COUNT: ${{ steps.monitor_script.outputs.updated_repos_count }}
          NEW_FEED_ENTRIES_COUNT: ${{ steps.monitor_script.outputs.new_feed_entries_count }}
          DOMAIN_NAME: ${{ matrix.config.domain }}
          STATE_FILE_NAME: ${{ matrix.config.state_file }}
        run: |
          # Configure Git within the robot's environment
          git config --global user.name 'GitHub Action Bot'
          git config --global user.email 'action@github.com'

          # Add the specific JSON state file using the ENV var (quote for safety)
          echo "Adding file: $STATE_FILE_NAME"
          git add "$STATE_FILE_NAME"
          commit_msg="Update state for $DOMAIN_NAME: "
          commit_msg+="NewURLs($NEW_URLS_COUNT) "
          commit_msg+="ChangedPages($CHANGED_PAGES_COUNT) "
          commit_msg+="ChangedAssets($CHANGED_ASSETS_COUNT) "
          commit_msg+="UpdatedRepos($UPDATED_REPOS_COUNT) "
          commit_msg+="NewFeedItems($NEW_FEED_ENTRIES_COUNT)"
          echo "Committing changes with message: $commit_msg"
          git commit -m "$commit_msg" || echo "No changes staged to commit"

          # --- ADD THIS SECTION ---
          echo "Pulling remote changes with rebase..."
          # Attempt to pull and rebase the local commit on top of remote changes.
          # The || echo part handles cases where pull fails (e.g., complex conflicts)
          # without necessarily stopping the script here, but the push might still fail then.
          # A rebase conflict WILL cause the step to fail later if not resolved.
          git pull --rebase || echo "Pull/rebase failed (maybe conflicts?)"
          # --- END OF ADDED SECTION ---

          # Push the changes back to your GitHub repository
          echo "Pushing changes..."
          git push # Keep this line without the || echo fallback
