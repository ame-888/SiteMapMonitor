# Simple name for this automated task
name: Sitemap Monitor (Multiple Domains)

# --- When to run this task ---
on:
  schedule:
    # Runs automatically. This example runs every hour at the start of the hour.
    - cron: '0 * * * *'
  # Allows you to run it manually from the GitHub Actions tab
  workflow_dispatch:

permissions:
  contents: write # Allow the workflow to push commits back to the repository

# --- What jobs to run ---
jobs:
  monitor:
    # Use a standard virtual computer provided by GitHub
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Allows other domains to continue if one fails
      matrix:
        config:
          - domain: "DeepMind"
            sitemap_url: "https://deepmind.google/sitemap.xml"
            state_file: "known_urls_deepmind.txt"
          - domain: "GoogleDevAI"
            sitemap_url: "https://ai.google.dev/sitemap.xml"
            state_file: "known_urls_googledevai.txt"
          - domain: "Llama"
            sitemap_url: "https://www.llama.com/sitemap.xml" # Note: Ensure this sitemap exists
            state_file: "known_urls_llama.txt"
          - domain: "OpenAI"
            sitemap_url: "https://openai.com/sitemap.xml"
            state_file: "known_urls_openai.txt"
          - domain: "PlatformOpenAI"
            sitemap_url: "https://platform.openai.com/sitemap.xml"
            state_file: "known_urls_platformopenai.txt"
          - domain: "Anthropic"
            sitemap_url: "https://docs.anthropic.com/sitemap.xml"
            state_file: "known_urls_anthropic.txt"
          - domain: "MistralAI"
            sitemap_url: "https://docs.mistral.ai/sitemap.xml"
            state_file: "known_urls_MistralAI.txt"
          - domain: "Grok"
            sitemap_url: "https://docs.x.ai/sitemap.xml"
            state_file: "known_urls_grok.txt"
          # Add more entries like the one above for other domains
          # - domain: "AnotherDomain"
          #   sitemap_url: "https://another.net/sitemap_index.xml"
          #   state_file: "known_urls_another.txt"

    steps: # <<< Correctly indented under 'monitor:'
      # Step 1: Get a copy of our repository code
      - name: Checkout code # <<< Correctly indented under 'steps:' (2 spaces)
        uses: actions/checkout@v3 # <<< Correctly indented under '- name:' (4 spaces)

      # Step 2: Set up the Python language environment
      - name: Set up Python # <<< Correctly indented under 'steps:'
        uses: actions/setup-python@v4 # <<< Correctly indented under '- name:'
        with: # <<< Correctly indented under '- name:'
          python-version: '3.x' # <<< Correctly indented under 'with:'

      # Step 3: Install the tools our Python script needs
      - name: Install dependencies # <<< Correctly indented under 'steps:'
        run: pip install requests beautifulsoup4 lxml # <<< Correctly indented under '- name:'

      # Step 4: Run our custom Python script for the current domain
      - name: Run monitoring script for ${{ matrix.config.domain }} # <<< Correctly indented under 'steps:'
        id: monitor_script # <<< Correctly indented under '- name:'
        env: # <<< Correctly indented under '- name:'
          # Use matrix variables here
          SITEMAP_URL: ${{ matrix.config.sitemap_url }} # <<< Correctly indented under 'env:'
          KNOWN_URLS_FILE: ${{ matrix.config.state_file }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL || '' }}
        run: python monitor_script.py # <<< Correctly indented under '- name:'

      # Step 5: Send a Discord notification (Force run for testing)
      - name: Send Discord Notification for ${{ matrix.config.domain }} # <<< Correctly indented under 'steps:'
        # TEMPORARILY CHANGED condition to test Discord sending
        # It will run even if count is 0, as long as the webhook URL is set.
        if: steps.monitor_script.outputs.new_urls_count < 999999999999 && env.DISCORD_WEBHOOK_URL != ''
        run: | # <<< Correctly indented under '- name:'
          # Add the domain name to the notification for clarity
          # The message might look empty if new_urls_list is blank, but it tests the sending
          curl -H "Content-Type: application/json" \
               -d '{ "content": "**[TEST RUN] URLs detected on ${{ matrix.config.domain }}** (${{ env.SITEMAP_URL }}):\n```\n${{ steps.monitor_script.outputs.new_urls_list }}\n```" }' \
               ${{ env.DISCORD_WEBHOOK_URL }} # Use the env variable set in Step 4

      # Step 6: Save the updated list of known pages back to our repository
      - name: Commit updated known URLs for ${{ matrix.config.domain }} # <<< Correctly indented under 'steps:'
        # ONLY run if new URLs were actually found (original logic)
        if: steps.monitor_script.outputs.new_urls_count > 0
        run: | # <<< Correctly indented under '- name:'
          # Configure Git within the robot's environment
          git config --global user.name 'GitHub Action Bot'
          git config --global user.email 'action@github.com'
          # Use the matrix variable for the state file name
          echo "Adding file: ${{ matrix.config.state_file }}"
          git add ${{ matrix.config.state_file }}
          # Add domain to commit message for clarity
          git commit -m "Update known URLs for ${{ matrix.config.domain }}" || echo "No changes to commit"
          # Push the changes back to your GitHub repository
          git push || echo "Push failed (maybe no changes or conflict)"
